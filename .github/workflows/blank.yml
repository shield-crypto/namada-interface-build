name: Check & Build Namadillo (with Input)

on:
#  schedule:
#    - cron: "0 * * * *"  # Runs every hour
  workflow_dispatch:
    inputs:
      build_tag:
        description: 'A tag of the Namadillo source to use (otherwise latest is used)'
        default: ''
        required: false
        type: string
      INDEXER_URL:
        description: "Indexer URL"
        required: true
        default: "https://namada-indexer.shield-crypto.com"
      RPC_URL:
        description: "RPC URL"
        required: true
        default: "https://namada-public-rpc.shield-crypto.com"
      MASP_URL:
        description: "MASP URL"
        required: true
        default: "https://namada-public-masp.shield-crypto.com"
      CHAIN_ID:
        description: "Chain ID"
        required: true
        default: "namada.5f5de2dd1b88cba30586420"

  push:
    tags:
      - "namadillo@*"

env:
  INDEXER_URL: ${{ inputs.INDEXER_URL }}
  RPC_URL: ${{ inputs.RPC_URL }}
  MASP_URL: ${{ inputs.MASP_URL }}
  CHAIN_ID: ${{ inputs.CHAIN_ID }}

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Print environment variables
        run: |
          echo "Tag: " ${{ inputs.build_tag }}
          echo "Indexer: $INDEXER_URL"
          echo "RPC: $RPC_URL"
          echo "MASP: $MASP_URL"
          echo "Chain ID: $CHAIN_ID"
      - name: Checkout this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to check tags
          ssh-key: ${{ secrets.GH_PAT }}
      - name: Load last processed tag
        id: load-last-tag
        run: |
          if [[ -f .github/last_tag.txt ]]; then
            LAST_TAG=$(cat .github/last_tag.txt)
            echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          else
            echo "LAST_TAG=" >> $GITHUB_ENV
          fi
          echo "Loaded Last Processed Tag. LAST_TAG=" 
      - name: Clone Namada repository
        uses: actions/checkout@v4
        with:
            repository: anoma/namada-interface
            fetch-depth: 0  # Fetch all history and tags
            path: source-repo
  
      - name: Fetch latest Namadillo tag
        id: check-tag
        run: |
          cd source-repo
          echo "Last Processed Tag. LAST_TAG=" 
          echo "LAST_TAG=" >> $GITHUB_ENV
          LATEST_TAG=$(git tag --sort=-creatordate | grep -E '^namadillo@' | head -n 1)
          echo "Latest tag from Namada: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

          USER_INPUT_TAG="${{ inputs.build_tag }}"
          if [[ -n "$USER_INPUT_TAG" ]]; then
            echo "LATEST_TAG=$USER_INPUT_TAG" >> "$GITHUB_ENV"
            echo "Using user input tag: $LATEST_TAG"
          fi

          echo "$LATEST_TAG" > ../.github/last_tag.txt
          echo "do_build=true" >> $GITHUB_ENV
          echo switching to $LATEST_TAG for the build process 
          git checkout $LATEST_TAG
      - name: Restore yarn cache
        if: env.do_build == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ./source-repo/node_modules
            ./source-repo/apps/*/node_modules
            ./source-repo/packages/*/node_modules
            ./source-repo/e2e/node_modules
            ./source-repo/.cache/puppeteer
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Restore Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            packages/shared/lib
            packages/crypto/lib
          shared-key: ${{ inputs.cache-name }}

      - name: Install dependencies
        if: env.do_build == 'true'
        run: yarn
        shell: bash
        working-directory: source-repo

      - name: Setup Rust toolchain
        run: rustup toolchain add nightly-2025-03-27

      - name: Install protoc
        if: env.do_build == 'true'
        run: sudo apt-get install -y protobuf-compiler

      - name: Build Namadillo
        if: env.do_build == 'true'
        working-directory: source-repo/apps/namadillo
        run: yarn build

      - name: Build the Chrome extension
        if: env.do_build == 'true'
        working-directory: source-repo/apps/extension
        run: yarn build:chrome
        env:
            NAMADA_INTERFACE_NAMADA_CHAIN_ID: ${{ env.CHAIN_ID }}

      - name: Build the Firefox extension
        if: env.do_build == 'true'
        working-directory: source-repo/apps/extension
        run: yarn build:firefox
        env:
            NAMADA_INTERFACE_NAMADA_CHAIN_ID: ${{ env.CHAIN_ID }}

      - name: Copy the extensions for deployment
        if: env.do_build == 'true'
        run: |
            cp source-repo/apps/extension/build/firefox/namada_keychain-*.zip source-repo/apps/namadillo/dist/namada-keychain-firefox.zip
            cp source-repo/apps/extension/build/chrome/namada_keychain-*.zip source-repo/apps/namadillo/dist/namada-keychain-chrome.zip


      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "${{ env.LATEST_TAG }}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        if: steps.check_release.outputs.exists == 'false'
        working-directory: source-repo/apps/namadillo/dist
        run: |
          if [ -f ${{ env.LATEST_TAG }}.zip ]; then
            rm ${{ env.LATEST_TAG }}.zip
          fi
          zip -r ${{ env.LATEST_TAG }}.zip .
          gh release upload ${{ env.LATEST_TAG }} ${{ env.LATEST_TAG }}.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Namadillo
        if: env.do_build == 'true'
        working-directory: source-repo/apps/namadillo
        run: |
            echo "" > dist/config.toml
            echo "indexer_url = \"${{ env.INDEXER_URL }}\"" >> dist/config.toml
            echo "rpc_url = \"${{ env.RPC_URL }}\"" >> dist/config.toml
            echo "masp_indexer_url = \"${{ env.MASP_URL }}\"" >> dist/config.toml

      - name: Clone Target repository
        if: env.do_build == 'true'
        uses: actions/checkout@v4
        with:
          repository: shield-crypto/namadillo-build
          ref: main
          path: target-repo
          ssh-key: ${{ secrets.GH_DEPLOY_KEY }}
